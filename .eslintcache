[{"/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/index.js":"1","/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/Game.js":"2","/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/PengineClient.js":"3","/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/RadioButton.js":"4","/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/Board.js":"5","/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/Square.js":"6","/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/Clue.js":"7"},{"size":177,"mtime":1620736063156,"results":"8","hashOfConfig":"9"},{"size":9016,"mtime":1623344450387,"results":"10","hashOfConfig":"9"},{"size":2201,"mtime":1620736063135,"results":"11","hashOfConfig":"9"},{"size":583,"mtime":1621003416248,"results":"12","hashOfConfig":"9"},{"size":2948,"mtime":1621000147174,"results":"13","hashOfConfig":"9"},{"size":415,"mtime":1621001730198,"results":"14","hashOfConfig":"9"},{"size":457,"mtime":1620738214386,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"140eqru",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/index.js",[],["33","34"],"/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/Game.js",["35"],"import React from 'react';\nimport PengineClient from './PengineClient';\nimport Board from './Board';\nimport RadioButton from './RadioButton';\nimport { queryByTestId } from '@testing-library/dom';\n\nclass Game extends React.Component {\n\n  pengine;\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      grid_aux: null,\n      grid: null,\n      rowClues: null,\n      colClues: null,\n      waiting: false,\n      opcion: '#',\n      satisfaccion_filas: [],\n      satisfaccion_cols: [],\n      victoria: false,\n      tablero_solucion_off: true,\n      resolver_celda_on: false\n    };\n    this.onValueChange = this.onValueChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n    this.handlePengineCreate = this.handlePengineCreate.bind(this);\n    this.mostrarSolucion = this.mostrarSolucion.bind(this);\n    this.descubrirCelda = this.descubrirCelda.bind(this);\n    this.pengine = new PengineClient(this.handlePengineCreate);\n  }\n\n  handlePengineCreate() {\n    const queryS = 'init(PistasFilas, PistasColumns, Grilla)';\n    this.pengine.query(queryS, (success, response) => {\n      if (success) {\n        this.setState({\n          grid: response['Grilla'],\n          rowClues: response['PistasFilas'],\n          colClues: response['PistasColumns']\n        });\n\n        let satisfaccion_filas_aux = [];\n        let satisfaccion_cols_aux = [];\n\n        for(let i=0; i<this.state.grid.length; i++){\n          satisfaccion_filas_aux[i] = 0;\n          satisfaccion_cols_aux[i] = 0;\n        }\n\n        this.setState({\n          satisfaccion_filas: satisfaccion_filas_aux,\n          satisfaccion_cols: satisfaccion_cols_aux\n        }\n        );\n\n      }\n    });\n  }\n\n  handleClick(i, j) {\n    // No action on click if we are waiting.\n    if (this.state.waiting) {\n      return;\n    }\n    // Build Prolog query to make the move, which will look as follows:\n    // put(\"#\",[0,1],[], [],[[\"X\",_,_,_,_],[\"X\",_,\"X\",_,_],[\"X\",_,_,_,_],[\"#\",\"#\",\"#\",_,_],[_,_,\"#\",\"#\",\"#\"]], GrillaRes, FilaSat, ColSat)\n    // const squaresS = JSON.stringify(this.state.grid).replaceAll('\"_\"', \"_\"); // Remove quotes for variables.\n    \n    const squaresS = JSON.stringify(this.state.grid).replaceAll('\"_\"', '_')\n\n    let pistas_filas = this.formatear_pista(this.state.rowClues);\n    let pistas_columnas = this.formatear_pista(this.state.colClues);\n\n    let queryS = null;\n    \n    if (!this.state.resolver_celda_on){\n        queryS = 'put(\"' + this.state.opcion + '\", [' + i + ',' + j + ']' \n           + ', ' + pistas_filas + ', ' + pistas_columnas + ',' + squaresS + ', GrillaRes, FilaSat, ColSat)';\n    }\n    else{\n      //revelarCelda(Grilla, [RowN, ColN], PistasFilas, PistasColumnas, NewGrilla, FilaSat, ColSat)\n        queryS = 'revelarCelda(' + squaresS + ', [' + i + ',' + j + ']' \n          + ', ' + pistas_filas + ', ' + pistas_columnas + ', GrillaRes, FilaSat, ColSat)';\n    }\n\n    console.log(queryS);\n\n    this.setState({\n      waiting: true\n    });\n    this.pengine.query(queryS, (success, response) => {\n      if (success) {\n        this.setState({\n          grid: response['GrillaRes'],\n          waiting: false\n        });\n\n        let satisfaccion_filas_aux = this.state.satisfaccion_filas;\n        let satisfaccion_cols_aux = this.state.satisfaccion_cols;\n\n        satisfaccion_filas_aux[i] = response['FilaSat'];\n        satisfaccion_cols_aux[j] = response['ColSat'];\n        \n        this.setState({\n          satisfaccion_filas: satisfaccion_filas_aux,\n          satisfaccion_cols: satisfaccion_cols_aux,\n          victoria: this.ganado(this.state.satisfaccion_filas, this.state.satisfaccion_cols)\n        });\n\n      } else {\n        this.setState({\n          waiting: false\n        });\n      }\n    });\n\n    if (this.state.resolver_celda_on){\n      this.setState({\n        resolver_celda_on: false\n      });\n      alert(\"Valor revelado en la celda (\"+ i + \", \" + j + \")\");\n    }\n  }\n\n  /**\n   * Manejador de eventos de RadioButton\n   * @param {} event Evento capturado\n   */\n  onValueChange(event){\n    this.setState({\n        opcion: event.target.value\n    });\n  }\n\n/**\n * Reemplaza un caracter de una cadena por otro dado, dado un índice\n * @param {*} data Cadena de caracteres original\n * @param {*} index Índice donde se encuentra el caracter a reemplazar\n * @param {*} replaceMent Caracter dado para reemplazar el anterior\n * @returns Nueva cadena de caracteres con el nuevo caracter en lugar del anterior\n */\nreplaceUsingIndex(data,index,replaceMent){\n  if(index >= data.length) return data;\n\n  return data.substring(0,index)+replaceMent+data.substring(index+1)\n}\n\n/**\n * Dada una pista en formato de pengines, devuelve una cadena representando\n * esa pista como una listas de listas al estilo Prolog\n * @param {*} pista_bruto Pista en formato de pengines (array list)\n * @returns Una cadena representando la pista como una listas de listas al \n * estilo Prolog\n */\nformatear_pista(pista_bruto){\n  let pistas_formateada = \"[\";\n  let pista_unitaria = \"\";\n  pista_bruto.forEach(pista => {\n    pista_unitaria = \"[\"\n    pista.forEach(p => {\n      pista_unitaria += p + \",\";\n    });\n    pista_unitaria = this.replaceUsingIndex(pista_unitaria, pista_unitaria.length-1, ']');\n    pistas_formateada += pista_unitaria + \",\";\n  });  \n  pistas_formateada = this.replaceUsingIndex(pistas_formateada, pistas_formateada.length-1, ']');\n  \n  return pistas_formateada;\n}\n\n/**\n * Analiza el estado de satisfacción de las filas y de las columnas y retorna\n * verdadero si se satisfacen todas las pistas, falso en caso contrario\n * @param {*} satisfaccion_filas Arreglo con el estado de satisfacción de las\n * pistas de las filas\n * @param {*} satisfaccion_cols Arreglo con el estado de satisfacción de las\n * pistas de las columnas\n * @returns Verdadero si se satisfacen todas las pistas, falso en caso contrario\n */\nganado(satisfaccion_filas, satisfaccion_cols){\n  let filas_satisfechas = true;\n  let i = 0;\n  while(filas_satisfechas && i<satisfaccion_filas.length){\n    filas_satisfechas = (satisfaccion_filas[i] === 1);\n    i++;\n  }\n\n  let cols_satisfechas = true;\n  if(filas_satisfechas){\n    i = 0;\n    while(cols_satisfechas && i<satisfaccion_cols.length){\n      cols_satisfechas = (satisfaccion_cols[i] === 1);\n      i++;\n    }\n  }\n\n  return (filas_satisfechas && cols_satisfechas);\n}\n\nmostrarSolucion(){\n    this.setState({\n        tablero_solucion_off: !this.state.tablero_solucion_off\n      }\n    )\n    //Si se debe mostrar el tablero solucion, entonces reemplazar grilla por su solucion\n    if (this.state.tablero_solucion_off){\n      const queryS = 'grillaSolucion(GrillaSolucion)';      \n      this.pengine.query(queryS, (success, response) => {\n        if (success) {\n          this.setState({\n            grid_aux: this.state.grid,\n            grid: response['GrillaSolucion'],\n            waiting: true //Desabilita el clickeado de los cuadrados\n          });\n        }\n      });\n    }\n    else{\n      this.setState({\n        grid: this.state.grid_aux,\n        grid_aux: null,\n        waiting: false //Habilita el clickeado de los cuadrados\n      })\n    }\n}\n\ndescubrirCelda(){\n  alert(\"Seleccione una casilla vacía para revelar su valor\")\n  this.setState({\n    resolver_celda_on: true\n  });\n}\n\n  render() {\n    if (this.state.grid === null) {\n      return null;\n    }\n    \n    let statusText = 'Keep playing!';\n    if(this.state.victoria){\n      statusText = 'Has ganado!';\n    }\n\n    let textoBotonSolucion = (this.state.tablero_solucion_off) ? \"Mostrar solución\" : \"Ocultar solución\";\n    let textoBotonCelda = (this.state.resolver_celda_on) ? \"Resolviendo celda\" : \"Resolver celda\";\n\n    return (\n      <div className=\"global\">\n        <div className=\"game\">\n          <Board\n            grid={this.state.grid}\n            rowClues={this.state.rowClues}\n            colClues={this.state.colClues}\n            onClick={(i, j) => this.handleClick(i,j)}\n\n            seguir_jugando = {!this.state.victoria}\n            satisfaccion_filas = {this.state.satisfaccion_filas}\n            satisfaccion_cols = {this.state.satisfaccion_cols}\n          />\n          <div className=\"gameInfo\">\n            {statusText}\n          </div>\n        </div>\n          <div className=\"selectorOpcion\">\n            <RadioButton\n              value = 'X'\n              checked = {this.state.opcion === 'X'}\n              onChange = {this.onValueChange}\n              contenido = \"X\"\n            />\n            <RadioButton\n              value = '#'\n              checked = {this.state.opcion === '#'}\n              onChange = {this.onValueChange}\n              contenido = \"◼\"\n            />\n          </div>\n          \n          <div className=\"buttonSolution\">\n              <button className=\"boton\" onClick={this.mostrarSolucion}> {textoBotonSolucion} </button>\n          </div>\n\n          <div className=\"buttonSolutionCell\">\n              <button className=\"botonCell\" onClick={this.descubrirCelda}> {textoBotonCelda} </button>\n          </div>\n          \n        </div>\n    );\n  }\n}\n\nexport default Game;","/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/PengineClient.js",[],"/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/RadioButton.js",[],"/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/Board.js",[],"/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/Square.js",[],["36","37"],"/media/david/DATOS/Documents/UNS/3er Año/Lógica para Ciencias de la Computación/Proyecto/02/LCC-proyecto-nonograma/src/Clue.js",[],{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","severity":1,"message":"43","line":5,"column":10,"nodeType":"44","messageId":"45","endLine":5,"endColumn":23},{"ruleId":"38","replacedBy":"46"},{"ruleId":"40","replacedBy":"47"},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-unused-vars","'queryByTestId' is defined but never used.","Identifier","unusedVar",["48"],["49"],"no-global-assign","no-unsafe-negation"]